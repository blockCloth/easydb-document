import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as a,b as e}from"./app-BYR_TEWI.js";const c={},n=e("h3",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言"},[e("span",null,"前言")])],-1),r=e("p",null,"EasyDB 是一个轻量级的数据库系统，采用 C/S（Client/Server）架构，旨在为开发者提供一个简洁且高效的数据库管理解决方案。EasyDB 支持客户端通过 socket 通信与服务器进行交互，执行 SQL 语句并实时获取结果。它的设计和实现类似于 MySQL，并且提供了一套完整的通信机制和核心类，使得开发者可以轻松构建和管理自己的数据库系统。",-1),s=e("p",null,"在本教程中，我们将详细介绍两种实现 EasyDB 的方式。第一部分将讲解如何通过 WebSocket 实现实时的数据库通信管理，这使得客户端能够通过 WebSocket 连接服务器，发送 SQL 命令并即时接收结果。第二部分则聚焦于 EasyDB 的核心通信机制和服务器、客户端的实现，通过 socket 进行数据传输与处理，涵盖了从编码解码到服务器与客户端的整个工作流程。",-1),i=e("p",null,"通过本文，您将全面了解如何使用 WebSocket 和 Socket 技术来构建一个具有高实时性和可扩展性的数据库系统。",-1),l=[n,r,s,i];function m(p,d){return a(),o("div",null,l)}const u=t(c,[["render",m],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/demo/communication_manager/","title":"EasyDB 通信规则","lang":"zh-CN","frontmatter":{"title":"EasyDB 通信规则","index":false,"icon":"hugeicons:plug-socket","category":["communication"],"tag":["socket","websocket"],"description":"前言 EasyDB 是一个轻量级的数据库系统，采用 C/S（Client/Server）架构，旨在为开发者提供一个简洁且高效的数据库管理解决方案。EasyDB 支持客户端通过 socket 通信与服务器进行交互，执行 SQL 语句并实时获取结果。它的设计和实现类似于 MySQL，并且提供了一套完整的通信机制和核心类，使得开发者可以轻松构建和管理自己的数...","head":[["meta",{"property":"og:url","content":"https://github.com/blockCloth/EasyDB/demo/communication_manager/"}],["meta",{"property":"og:site_name","content":"EasyDB"}],["meta",{"property":"og:title","content":"EasyDB 通信规则"}],["meta",{"property":"og:description","content":"前言 EasyDB 是一个轻量级的数据库系统，采用 C/S（Client/Server）架构，旨在为开发者提供一个简洁且高效的数据库管理解决方案。EasyDB 支持客户端通过 socket 通信与服务器进行交互，执行 SQL 语句并实时获取结果。它的设计和实现类似于 MySQL，并且提供了一套完整的通信机制和核心类，使得开发者可以轻松构建和管理自己的数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T14:46:19.000Z"}],["meta",{"property":"article:author","content":"blockCloth"}],["meta",{"property":"article:tag","content":"socket"}],["meta",{"property":"article:tag","content":"websocket"}],["meta",{"property":"article:modified_time","content":"2024-08-31T14:46:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EasyDB 通信规则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-31T14:46:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"blockCloth\\",\\"url\\":\\"https://github.com/blockCloth\\"}]}"]]},"headers":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]}],"git":{"createdTime":1725115579000,"updatedTime":1725115579000,"contributors":[{"name":"Dai Yuxuan","email":"1808870333@qq.com","commits":1}]},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"demo/communication_manager/README.md","localizedDate":"2024年8月31日","autoDesc":true,"excerpt":"<h3>前言</h3>\\n<p>EasyDB 是一个轻量级的数据库系统，采用 C/S（Client/Server）架构，旨在为开发者提供一个简洁且高效的数据库管理解决方案。EasyDB 支持客户端通过 socket 通信与服务器进行交互，执行 SQL 语句并实时获取结果。它的设计和实现类似于 MySQL，并且提供了一套完整的通信机制和核心类，使得开发者可以轻松构建和管理自己的数据库系统。</p>\\n<p>在本教程中，我们将详细介绍两种实现 EasyDB 的方式。第一部分将讲解如何通过 WebSocket 实现实时的数据库通信管理，这使得客户端能够通过 WebSocket 连接服务器，发送 SQL 命令并即时接收结果。第二部分则聚焦于 EasyDB 的核心通信机制和服务器、客户端的实现，通过 socket 进行数据传输与处理，涵盖了从编码解码到服务器与客户端的整个工作流程。</p>"}');export{u as comp,_ as data};
