import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as n}from"./app-v8rBSQov.js";const t={},l=n(`<blockquote><p>本章涉及代码：com/dyx/simpledb/backend/vm/Entry.java</p></blockquote><p>从这里开始，我们将深入探讨 Version Manager (VM) 的实现。VM 是 EasyDB 的事务和数据版本管理核心，类似于 Data Manager 是 EasyDB 的数据管理核心。VM 基于两段锁协议（2PL）实现了调度序列的可串行化，并通过多版本并发控制（MVCC）消除读写阻塞，同时支持多种事务隔离级别。</p><h3 id="_2pl-与-mvcc" tabindex="-1"><a class="header-anchor" href="#_2pl-与-mvcc"><span>2PL 与 MVCC</span></a></h3><h4 id="冲突与-2pl" tabindex="-1"><a class="header-anchor" href="#冲突与-2pl"><span>冲突与 2PL</span></a></h4><p>在数据库中，多个事务可能会同时操作同一个数据项，这就可能导致冲突。我们暂时不讨论插入操作，只考虑更新操作（U）和读操作（R）。当以下三个条件同时满足时，两个操作之间就存在冲突：</p><ol><li>这两个操作是由不同的事务执行的；</li><li>它们针对的是同一个数据项；</li><li>其中至少有一个是更新操作。</li></ol><p>这种情况下，冲突的顺序会影响最终的结果。举个简单的例子，假设有两个事务 <code>T1</code> 和 <code>T2</code>，它们同时对变量 <code>x</code> 进行操作，初始值为 0：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>T1 开始</span></span>
<span class="line"><span>T2 开始</span></span>
<span class="line"><span>T1 读取 x（得到 0）</span></span>
<span class="line"><span>T2 读取 x（得到 0）</span></span>
<span class="line"><span>T1 更新 x（加 1，x 变为 1）</span></span>
<span class="line"><span>T2 更新 x（加 1，x 变为 1）</span></span>
<span class="line"><span>T1 提交</span></span>
<span class="line"><span>T2 提交</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个场景中，最终 <code>x</code> 的值是 1，而不是我们期望的 2。这个问题的根源在于事务的执行顺序导致了冲突。为了解决这个问题，VM 采用了<strong>两段锁协议</strong>（Two-Phase Locking, 2PL）。 2PL 的基本思想是，当一个事务想要操作某个数据项时，它必须先获得这个数据项的锁。如果另一个事务已经持有了这个锁，当前事务就必须等待。例如：</p><ul><li><strong>场景 1</strong>：假设 <code>T1</code> 对数据项 <code>x</code> 加了锁，并尝试更新它。这时，<code>T2</code> 也想读取或更新 <code>x</code>，但由于 <code>x</code> 已被 <code>T1</code> 锁定，<code>T2</code> 必须等待 <code>T1</code> 释放锁后才能继续操作。</li></ul><p>这种机制确保了事务的顺序执行，避免了数据不一致的问题。然而，2PL 也会带来一个新的问题：<strong>事务阻塞</strong>。当多个事务同时争夺同一资源时，它们可能会相互等待，最终可能导致死锁。</p><h4 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc"><span>MVCC</span></a></h4><p>为了减少因 2PL 引起的事务阻塞，EasyDB 实现了<strong>多版本并发控制</strong>（Multi-Version Concurrency Control, MVCC）。在介绍 MVCC 之前，我们先明确两个概念：<strong>记录</strong>和<strong>版本</strong>。</p><ul><li><strong>记录</strong>：在 EasyDB 中，每个记录代表数据的一项，类似于数据库表中的一行数据。</li><li><strong>版本</strong>：每当一个事务修改某条记录时，VM 会为这条记录创建一个新版本，而旧版本仍然保留，以供其他事务读取。</li></ul><p>通过 MVCC，EasyDB 能够降低事务之间的阻塞概率。以下是一个具体的例子：</p><ul><li><strong>场景 2</strong>：假设 <code>T1</code> 正在更新记录 <code>X</code>，创建了一个新的版本 <code>x3</code>。在 <code>T1</code> 提交之前，<code>T2</code> 也想读取 <code>X</code>。在没有 MVCC 的情况下，<code>T2</code> 会被阻塞，直到 <code>T1</code> 提交。但在 MVCC 的帮助下，<code>T2</code> 可以读取 <code>X</code> 的旧版本 <code>x2</code>，不需要等待 <code>T1</code> 完成。这意味着 <code>T2</code> 的执行结果相当于先于 <code>T1</code> 执行，从而避免了阻塞。</li></ul><p>通过这种方式，MVCC 大大提高了系统的并发性能，减少了事务之间的等待时间。但要注意，如果 <code>X</code> 没有旧版本，那么 <code>T2</code> 还是必须等待 <code>T1</code> 释放锁。 为了保证数据的正确性，VM 层在与 DM 层交互时必须遵守以下两条规定：</p><ol><li><strong>规定1</strong>：正在进行的事务不会读取其他未提交事务产生的数据。（为了增强数据库体验，增加了读未提交隔离级别）</li><li><strong>规定2</strong>：正在进行的事务不会修改其他未提交事务产生或修改的数据。</li></ol><p>2PL 和 MVCC 都自然地满足了这两条规定，确保了数据的一致性和安全性。</p><h3 id="记录的实现" tabindex="-1"><a class="header-anchor" href="#记录的实现"><span>记录的实现</span></a></h3><p>在 EasyDB 中，<strong>版本记录</strong>是通过 <code>Entry</code> 类来管理的。每条记录会保存其创建和删除的事务信息，这些信息会被存储在 <code>Entry</code> 数据结构中，并通过特定的方式管理和访问。</p><h4 id="entry-格式数据" tabindex="-1"><a class="header-anchor" href="#entry-格式数据"><span>Entry 格式数据</span></a></h4><p><code>Entry</code> 的格式如下：</p><blockquote><p><strong>[XMIN] [XMAX] [DATA]</strong></p></blockquote><ol><li><strong>XMIN</strong>：创建该记录的事务编号。</li><li><strong>XMAX</strong>：删除该记录的事务编号。</li><li><strong>DATA</strong>：记录的实际数据。</li></ol><h4 id="entry-结构" tabindex="-1"><a class="header-anchor" href="#entry-结构"><span>Entry 结构</span></a></h4><p>在 EasyDB 中，尽管理论上 MVCC 支持多版本控制，但在实际实现中，VM 层只保留每条记录的一个版本，更新操作由后续的表和字段管理（TBM）来处理。每条记录保存在一个 <code>DataItem</code> 中，<code>Entry</code> 结构中包含一个指向 <code>DataItem</code> 的引用。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> OF_XMIN </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     // XMIN 的偏移量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> OF_XMAX </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> OF_XMIN </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // XMAX 的偏移量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> OF_DATA </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> OF_XMAX </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // DATA 的偏移量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> uid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">              // 唯一标识符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataItem</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     // 记录的数据项</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> VersionManager</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     // 版本管理器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 加载一个 Entry 实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Entry</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">VersionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> uid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        DataItem</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> di</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((VersionManagerImpl)vm).</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(uid);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vm, di, uid);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 移除一个 Entry 实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志格式操作" tabindex="-1"><a class="header-anchor" href="#日志格式操作"><span>日志格式操作</span></a></h3><h4 id="wrapentryraw" tabindex="-1"><a class="header-anchor" href="#wrapentryraw"><span><code>wrapEntryRaw()</code></span></a></h4><p>这个方法用于生成日志格式的数据。当创建新版本时，事务 ID 会被作为 XMIN 存储，XMAX 预留为空，数据会附加在其后。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wrapEntryRaw</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] data) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] xmin </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Parser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">long2Byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(xid);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 将事务 ID 转为 8 字节数组</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] xmax </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 预留 8 字节空间给 XMAX，初始为空</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(xmin, xmax, data);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 合并为完整的 Entry 数据结构</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="data" tabindex="-1"><a class="header-anchor" href="#data"><span><code>data()</code></span></a></h4><p>这个方法用于返回记录中的实际数据部分。由于 XMIN 和 XMAX 占据了前 16 字节，数据部分会被截取并返回。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 加锁，确保数据访问的安全性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SubArray</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sa </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 获取存储的数据</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> OF_DATA]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 去除前 16 字节（XMIN 和 XMAX）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arraycopy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">raw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> OF_DATA, data, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 复制数据部分</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rUnLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 释放锁</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setxmax" tabindex="-1"><a class="header-anchor" href="#setxmax"><span><code>setXmax()</code></span></a></h4><p>当记录被删除时，<code>XMAX</code> 会被设置为删除该记录的事务 ID。这是版本控制中的一个关键步骤，用于标记记录的删除状态。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setXmax</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xid) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">before</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 备份原始数据，以便支持回滚</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SubArray</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sa </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arraycopy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Parser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">long2Byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(xid), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">raw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> OF_XMAX, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 设置 XMAX 为当前事务 ID</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dataItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">after</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(xid);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 记录修改操作的日志</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p><strong>本文作者：</strong><a href="https://github.com/blockCloth" target="_blank" rel="noopener noreferrer">blockCloth</a><br><strong>部分内容转载自：</strong><a href="https://shinya.click/projects/mydb/mydb6" target="_blank" rel="noopener noreferrer">https://shinya.click/projects/mydb/mydb6</a><br><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans" target="_blank" rel="noopener noreferrer">CC BY-NC-SA 4.0</a>许可协议。转载请注明来自 <a href="https://github.com/blockCloth" target="_blank" rel="noopener noreferrer">blockCloth</a></p></div>`,39),h=[l];function e(k,p){return a(),s("div",null,h)}const c=i(t,[["render",e],["__file","version.html.vue"]]),g=JSON.parse('{"path":"/demo/version_manager/version.html","title":"记录的版本","lang":"zh-CN","frontmatter":{"icon":"fluent:slide-record-20-regular","title":"记录的版本","order":1,"category":["VM"],"tag":["version"],"description":"本章涉及代码：com/dyx/simpledb/backend/vm/Entry.java 从这里开始，我们将深入探讨 Version Manager (VM) 的实现。VM 是 EasyDB 的事务和数据版本管理核心，类似于 Data Manager 是 EasyDB 的数据管理核心。VM 基于两段锁协议（2PL）实现了调度序列的可串行化，并通过多版...","head":[["meta",{"property":"og:url","content":"https://github.com/blockCloth/EasyDB/demo/version_manager/version.html"}],["meta",{"property":"og:site_name","content":"EasyDB"}],["meta",{"property":"og:title","content":"记录的版本"}],["meta",{"property":"og:description","content":"本章涉及代码：com/dyx/simpledb/backend/vm/Entry.java 从这里开始，我们将深入探讨 Version Manager (VM) 的实现。VM 是 EasyDB 的事务和数据版本管理核心，类似于 Data Manager 是 EasyDB 的数据管理核心。VM 基于两段锁协议（2PL）实现了调度序列的可串行化，并通过多版..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T14:46:19.000Z"}],["meta",{"property":"article:author","content":"blockCloth"}],["meta",{"property":"article:tag","content":"version"}],["meta",{"property":"article:modified_time","content":"2024-08-31T14:46:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"记录的版本\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-31T14:46:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"blockCloth\\",\\"url\\":\\"https://github.com/blockCloth\\"}]}"]]},"headers":[{"level":3,"title":"2PL 与 MVCC","slug":"_2pl-与-mvcc","link":"#_2pl-与-mvcc","children":[]},{"level":3,"title":"记录的实现","slug":"记录的实现","link":"#记录的实现","children":[]},{"level":3,"title":"日志格式操作","slug":"日志格式操作","link":"#日志格式操作","children":[]}],"git":{"createdTime":1725115579000,"updatedTime":1725115579000,"contributors":[{"name":"Dai Yuxuan","email":"1808870333@qq.com","commits":1}]},"readingTime":{"minutes":5.8,"words":1741},"filePathRelative":"demo/version_manager/version.md","localizedDate":"2024年8月31日","autoDesc":true,"excerpt":"<blockquote>\\n<p>本章涉及代码：com/dyx/simpledb/backend/vm/Entry.java</p>\\n</blockquote>\\n<p>从这里开始，我们将深入探讨 Version Manager (VM) 的实现。VM 是 EasyDB 的事务和数据版本管理核心，类似于 Data Manager 是 EasyDB 的数据管理核心。VM 基于两段锁协议（2PL）实现了调度序列的可串行化，并通过多版本并发控制（MVCC）消除读写阻塞，同时支持多种事务隔离级别。</p>\\n<h3>2PL 与 MVCC</h3>\\n<h4>冲突与 2PL</h4>\\n<p>在数据库中，多个事务可能会同时操作同一个数据项，这就可能导致冲突。我们暂时不讨论插入操作，只考虑更新操作（U）和读操作（R）。当以下三个条件同时满足时，两个操作之间就存在冲突：</p>"}');export{c as comp,g as data};
