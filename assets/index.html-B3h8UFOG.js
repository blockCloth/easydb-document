import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,a}from"./app-DgcL2_31.js";const t={},n=a(`<p><strong>项目地址：</strong></p><ol><li><strong>EasyDB：</strong><a href="https://github.com/blockCloth/EasyDB" target="_blank" rel="noopener noreferrer"><strong>https://github.com/blockCloth/EasyDB</strong></a></li><li><strong>MYDB：</strong><a href="https://github.com/CN-GuoZiyang/MYDB" target="_blank" rel="noopener noreferrer"><strong>https://github.com/CN-GuoZiyang/MYDB</strong></a></li><li><strong>React Teriminal：</strong><a href="https://github.com/Tomotoes/react-terminal" target="_blank" rel="noopener noreferrer"><strong>https://github.com/Tomotoes/react-terminal</strong></a></li><li><strong>知识星球：</strong><a href="https://www.javabetter.cn/zhishixingqiu/" target="_blank" rel="noopener noreferrer"><strong>https://www.javabetter.cn/zhishixingqiu/</strong></a></li></ol><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在一次偶然的机会，通过<a href="https://www.javabetter.cn/zhishixingqiu/" target="_blank" rel="noopener noreferrer">二哥星球</a>得知了 <a href="https://github.com/CN-GuoZiyang/MYDB" target="_blank" rel="noopener noreferrer">MYDB </a>项目。该项目凭借其独特的设计理念和简洁的实现方式，引起了我的极大兴趣。作为一名热衷于数据库技术的开发者，我不仅深刻学习了 MYDB 的核心功能，还萌生了对其进行二次开发的想法。 在深入研究 MYDB 项目的过程中，我发现了该项目的许多亮点，同时也注意到一些可以进一步优化和扩展的地方。因此，我决定在保留其原有设计优势的基础上，增加一些实用的新功能，以满足更多应用场景的需求。通过这些改进，我希望能够让 EasyDB 项目在更多场合下展现出其强大的功能性和灵活性。</p><h2 id="整体结构" tabindex="-1"><a class="header-anchor" href="#整体结构"><span>整体结构</span></a></h2><p>EasyDB 的架构分为前端和后端两个部分，各自承担不同的职责：</p><h3 id="前端" tabindex="-1"><a class="header-anchor" href="#前端"><span>前端</span></a></h3><p>前端的职责相对简单，主要任务是读取用户的输入，并将其发送到后端进行处理。处理完成后，前端接收并显示执行结果，等待用户的下一次输入。EasyDB 的前端采用了基于 React Terminal 项目二次开发的解决方案以及基于Socket交互，提供了一个直观的命令行界面，用户可以方便地与数据库进行交互。</p><h3 id="后端" tabindex="-1"><a class="header-anchor" href="#后端"><span>后端</span></a></h3><p>后端则承担了更多的任务，负责解析并执行用户提交的 SQL 语句。如果输入的 SQL 语句合法，后端会尝试执行并返回结果；如果不合法，则会提示用户 SQL 语法错误。在 EasyDB 中，后端支持两种启动方式：</p><ol><li><strong>基于 Socket 交互的启动</strong>：提供轻量级、低延迟的网络交互。</li><li><strong>基于 SpringBoot + React 的启动</strong>：集成了现代 Web 框架，为前后端提供更强大的支持和灵活性。</li></ol><h2 id="easydb-模块依赖与职责概述" tabindex="-1"><a class="header-anchor" href="#easydb-模块依赖与职责概述"><span>EasyDB 模块依赖与职责概述</span></a></h2><p>EasyDB 的模块设计遵循一定的依赖关系，通过拓扑排序可以清晰地看到各个模块的实现顺序。在本教程中，模块的实现顺序为：<strong>Transaction Manager (TM) -&gt; Data Manager (DM) -&gt; Version Manager (VM) -&gt; Index Manager (IM) -&gt; Table Manager (TBM)</strong>。</p><figure><img src="https://blockcloth.cn/codingblog/mydb0.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="模块职责" tabindex="-1"><a class="header-anchor" href="#模块职责"><span>模块职责</span></a></h3><ol><li><strong>Transaction Manager (TM)</strong>：</li></ol><ul><li><strong>职责</strong>：TM 负责管理事务的状态，通过维护 <code>XID</code> 文件来跟踪每个事务的状态。它提供接口，供其他模块查询特定事务的状态，从而确保事务的一致性和数据的完整性。</li></ul><ol start="2"><li><strong>Data Manager (DM)</strong>：</li></ol><ul><li><strong>职责</strong>：DM 直接管理数据库的 <code>DB</code> 文件和日志文件，其主要任务包括： <ul><li><strong>分页管理</strong>：管理 <code>DB</code> 文件并对其进行分页缓存，以提高数据访问的效率。</li><li><strong>日志管理</strong>：管理日志文件，确保在发生错误时，系统能够根据日志恢复数据，保证数据的一致性。</li><li><strong>数据抽象</strong>：将 <code>DB</code> 文件抽象为 <code>DataItem</code>，供上层模块使用，同时提供相应的缓存机制。</li></ul></li></ul><ol start="3"><li><strong>Version Manager (VM)</strong>：</li></ol><ul><li><strong>职责</strong>：VM 通过实现两阶段锁协议，确保调度序列的可串行化，并通过多版本并发控制（MVCC）消除读写阻塞。VM 支持两种事务隔离级别，以满足不同的并发需求。</li></ul><ol start="4"><li><strong>Index Manager (IM)</strong>：</li></ol><ul><li><strong>职责</strong>：IM 负责实现基于 B+ 树的数据索引，提升数据检索的效率。目前，<code>where</code> 子句仅支持已建立索引的字段。</li></ul><ol start="5"><li><strong>Table Manager (TBM)</strong>：</li></ol><ul><li><strong>职责</strong>：TBM 负责管理数据库中的表和字段信息。它还负责解析 SQL 语句，并根据解析结果执行相应的表操作，确保数据的正确性和结构的一致性。</li></ul><h2 id="开发环境与运行示例" tabindex="-1"><a class="header-anchor" href="#开发环境与运行示例"><span>开发环境与运行示例</span></a></h2><h3 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h3><ol><li><code>JDK &gt;= 1.8</code></li><li><code>Maven &gt;= 3.5</code></li></ol><h3 id="运行示例" tabindex="-1"><a class="header-anchor" href="#运行示例"><span>运行示例</span></a></h3><h4 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot"><span>SpringBoot</span></a></h4><p>如果你希望在 Spring Boot 环境下运行 EasyDB，下面是操作步骤：</p><ol><li><strong>克隆项目并进入项目目录</strong>：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/blockCloth/EasyDB.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EasyDB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>配置数据库路径</strong>： 在 <code>application-dev.yml</code> 文件中配置数据库路径，并且在<code>application.yml</code>中切换配置文件，例如：</li></ol><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">custom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">D:/JavaCount/mydb/windows/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>启动 Spring Boot 应用</strong>： 直接在 IDE 中运行 Spring Boot 应用：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableScheduling</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleSqlDatabaseApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SimpleSqlDatabaseApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>访问数据库服务</strong>： Spring Boot 应用启动后，数据库服务将会运行在指定的端口（默认为 <code>8081</code>）。你可以通过发送 HTTP 请求或使用 REST 客户端来访问数据库服务。</li><li><strong>通过前端客户端进行交互</strong>： 你可以在浏览器中访问：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http://localhost:8081/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在页面中你可以输入 SQL 语句，前端会将其发送到后端 Spring Boot 服务进行处理，并显示执行结果。</p><h4 id="使用maven编译项目" tabindex="-1"><a class="header-anchor" href="#使用maven编译项目"><span>使用maven编译项目</span></a></h4><ol><li>首先执行一下命令编译源码：</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>编译完成后，使用以下命令创建数据库。此命令会在指定路径下创建一个新的数据库实例：</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec:java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;-Dexec.mainClass=&quot;com.dyx.simpledb.backend.Launcher&quot;&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;-Dexec.args=&quot;-create D:\\JavaCount\\mydb\\windows&quot;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>数据库创建后，使用以下命令启动数据库服务。该服务会在本地机器的 <code>9999</code> 端口运行：</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec:java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;-Dexec.mainClass=&quot;com.dyx.simpledb.backend.Launcher&quot;&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;-Dexec.args=&quot;-open D:\\JavaCount\\mydb\\windows\\test\\test&quot;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>打开一个新的终端窗口，执行以下命令启动数据库客户端。这将启动一个交互式命令行界面，用户可以在此输入类 SQL 语法，并将语句发送到数据库服务进行处理，随后返回执行结果：</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec:java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;-Dexec.mainClass=&quot;com.dyx.simpledb.client.Launcher&quot;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行示例：</p><figure><img src="https://blockcloth.cn/codingblog/socket.png" alt="socket.png" tabindex="0" loading="lazy"><figcaption>socket.png</figcaption></figure><h4 id="通过-intellij-idea-配置和启动-easydb-项目" tabindex="-1"><a class="header-anchor" href="#通过-intellij-idea-配置和启动-easydb-项目"><span>通过 IntelliJ IDEA 配置和启动 EasyDB 项目</span></a></h4><p>在通过 IntelliJ IDEA 启动 EasyDB 项目时，你可以利用启动配置来自动化数据库的创建和启动过程。以下步骤将指导你如何配置 IntelliJ IDEA，使其在启动 <code>com.dyx.simpledb.backend.Launcher</code> 类时，先创建数据库并打开它，随后只需启动 <code>com.dyx.simpledb.client.Launcher</code> 类即可进行交互。</p><h5 id="步骤一-配置-com-dyx-simpledb-backend-launcher-启动项" tabindex="-1"><a class="header-anchor" href="#步骤一-配置-com-dyx-simpledb-backend-launcher-启动项"><span>步骤一：配置 <code>com.dyx.simpledb.backend.Launcher</code> 启动项</span></a></h5><ol><li><strong>创建启动配置</strong>： <ul><li>在 IntelliJ IDEA 中，打开 <code>Run --&gt; Edit Configurations</code>。</li><li>点击左上角的 <code>+</code> 按钮，选择 <code>Application</code> 以创建一个新的启动配置。</li></ul></li><li><strong>配置数据库创建</strong>： <ul><li>在 <code>Name</code> 字段中输入合适的名称，例如 <code>LauncherStart</code>。</li><li>在 <code>Main class</code> 字段中，选择 <code>com.dyx.simpledb.backend.Launcher</code> 作为主类。</li><li>在 <code>Program arguments</code> 字段中，输入以下内容以创建数据库：</li></ul></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-create D:/JavaCount/mydb/windows/mydb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>设置 <code>Working directory</code> 为项目的根目录，确保所有路径都能正确解析。</li></ul><ol start="3"><li><strong>配置数据库打开</strong>： <ul><li>重复以上步骤，创建另一个启动配置。将 <code>Program arguments</code> 字段修改为：</li></ul></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-open D:/JavaCount/mydb/windows/mydb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li><strong>运行启动配置</strong>： <ul><li>首先运行创建数据库的启动配置，等待数据库创建成功。</li><li>然后运行打开数据库的启动配置，启动数据库服务。</li></ul></li></ol><h5 id="步骤二-启动-com-dyx-simpledb-client-launcher-进行交互" tabindex="-1"><a class="header-anchor" href="#步骤二-启动-com-dyx-simpledb-client-launcher-进行交互"><span>步骤二：启动 <code>com.dyx.simpledb.client.Launcher</code> 进行交互</span></a></h5><ol><li><strong>运行客户端</strong>： <ul><li>运行 <code>com.dyx.simpledb.client.Launcher</code> 启动配置，启动客户端。</li><li>客户端启动后，将进入交互式命令行，你可以在其中输入 SQL 语句，与数据库进行交互。</li></ul></li></ol><figure><img src="https://blockcloth.cn/codingblog/idea.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>本文作者：</strong><a href="https://github.com/blockCloth" target="_blank" rel="noopener noreferrer">blockCloth</a><br><strong>部分内容转载自：</strong><a href="https://shinya.click/projects/mydb/mydb0" target="_blank" rel="noopener noreferrer">https://shinya.click/projects/mydb/mydb0</a><br><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by/4.0/legalcode.zh-hans" target="_blank" rel="noopener noreferrer">CC BY-NC-SA 4.0</a>许可协议。转载请注明来自 <a href="https://github.com/blockCloth" target="_blank" rel="noopener noreferrer">blockCloth</a></p></div>`,64),l=[n];function r(o,h){return s(),e("div",null,l)}const p=i(t,[["render",r],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/demo/preface/","title":"前言","lang":"zh-CN","frontmatter":{"title":"前言","index":false,"icon":"icon-park-outline:press","category":["前言"],"description":"项目地址： EasyDB：https://github.com/blockCloth/EasyDB MYDB：https://github.com/CN-GuoZiyang/MYDB React Teriminal：https://github.com/Tomotoes/react-terminal 知识星球：https://www.javabette...","head":[["meta",{"property":"og:url","content":"https://github.com/blockCloth/EasyDB/demo/preface/"}],["meta",{"property":"og:site_name","content":"EasyDB"}],["meta",{"property":"og:title","content":"前言"}],["meta",{"property":"og:description","content":"项目地址： EasyDB：https://github.com/blockCloth/EasyDB MYDB：https://github.com/CN-GuoZiyang/MYDB React Teriminal：https://github.com/Tomotoes/react-terminal 知识星球：https://www.javabette..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blockcloth.cn/codingblog/mydb0.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T14:46:19.000Z"}],["meta",{"property":"article:author","content":"blockCloth"}],["meta",{"property":"article:modified_time","content":"2024-08-31T14:46:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前言\\",\\"image\\":[\\"https://blockcloth.cn/codingblog/mydb0.jpg\\",\\"https://blockcloth.cn/codingblog/socket.png\\",\\"https://blockcloth.cn/codingblog/idea.png\\"],\\"dateModified\\":\\"2024-08-31T14:46:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"blockCloth\\",\\"url\\":\\"https://github.com/blockCloth\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"整体结构","slug":"整体结构","link":"#整体结构","children":[{"level":3,"title":"前端","slug":"前端","link":"#前端","children":[]},{"level":3,"title":"后端","slug":"后端","link":"#后端","children":[]}]},{"level":2,"title":"EasyDB 模块依赖与职责概述","slug":"easydb-模块依赖与职责概述","link":"#easydb-模块依赖与职责概述","children":[{"level":3,"title":"模块职责","slug":"模块职责","link":"#模块职责","children":[]}]},{"level":2,"title":"开发环境与运行示例","slug":"开发环境与运行示例","link":"#开发环境与运行示例","children":[{"level":3,"title":"开发环境","slug":"开发环境","link":"#开发环境","children":[]},{"level":3,"title":"运行示例","slug":"运行示例","link":"#运行示例","children":[]}]}],"git":{"createdTime":null,"updatedTime":1725115579000,"contributors":[{"name":"Dai Yuxuan","email":"1808870333@qq.com","commits":2}]},"readingTime":{"minutes":6.33,"words":1899},"filePathRelative":"demo/preface/README.md","autoDesc":true,"excerpt":"<p><strong>项目地址：</strong></p>\\n<ol>\\n<li><strong>EasyDB：</strong><a href=\\"https://github.com/blockCloth/EasyDB\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>https://github.com/blockCloth/EasyDB</strong></a></li>\\n<li><strong>MYDB：</strong><a href=\\"https://github.com/CN-GuoZiyang/MYDB\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>https://github.com/CN-GuoZiyang/MYDB</strong></a></li>\\n<li><strong>React Teriminal：</strong><a href=\\"https://github.com/Tomotoes/react-terminal\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>https://github.com/Tomotoes/react-terminal</strong></a></li>\\n<li><strong>知识星球：</strong><a href=\\"https://www.javabetter.cn/zhishixingqiu/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>https://www.javabetter.cn/zhishixingqiu/</strong></a></li>\\n</ol>"}');export{p as comp,g as data};
